# -*- coding: utf-8 -*-
"""Image_Retrieval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1msRaKEA44SOyiXHMmUFCC9q3S7-fsVMV

#Image Retrieval using L1
"""

!gdown 1msLVo0g0LFmL9-qZ73vq9YEVZwbzOePF

!unzip -q data.zip

import os
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

ROOT = 'data'
CLASS_NAME = sorted(list(os.listdir(f'{ROOT}/train')))

def read_image_from_path(path, size):
    img = Image.open(path).convert('RGB').resize(size)
    img = np.array(img)
    return img

def folder_to_image(folder, size):
  list_dir = [folder + '/' +name for name in os.listdir(folder)]
  images_np = np.zeros(shape=(len(list_dir), *size, 3))
  images_path = []
  for i, path in enumerate(list_dir):
    images_path.append(path)
    images_np[i] = read_image_from_path(path, size)
  images_path  = np.array(images_path)
  return images_np, images_path

def absolute_difference(query, data):
  axis_batch_size = tuple(range(1, len(data.shape)))
  return np.sum(np.abs(query - data), axis=axis_batch_size)

def get_l1_score(root_img_path, query_path, size):
  query = read_image_from_path(query_path, size)
  ls_path_score = []
  for folder in os.listdir(root_img_path):
    if folder in CLASS_NAME:
      path = root_img_path + folder
      images_np, images_path = folder_to_image(path, size)
      rates = absolute_difference(query, images_np)
      ls_path_score.extend(list(zip(images_path, rates)))
  return query, ls_path_score

a = [1, 2, 3]
b = [4, 5, 6]
a = np.array(a)
b = np.array(b)
print(absolute_difference(a, b))

def plot_results(query_path, ls_path_score, reverse=False):
    """Plots the results of the image search."""
    # Sort the results by score
    ls_path_score_sorted = sorted(ls_path_score, key=lambda x: x[1], reverse=reverse)

    # Display the query image
    query_image = plt.imread(query_path)
    plt.figure(figsize=(5, 5))
    plt.imshow(query_image)
    plt.title("Query Image")
    plt.axis('off')
    plt.show()

    # Display the top 5 most similar images
    fig, axes = plt.subplots(1, 5, figsize=(20, 5))
    for i in range(5):
        image_path, score = ls_path_score_sorted[i]
        image = plt.imread(image_path)
        axes[i].imshow(image)
        axes[i].set_title(f"Score: {score:.2f}")
        axes[i].axis('off')
    plt.show()

root_img_path = f"{ROOT}/train/"
query_path = f"{ROOT}/train/goldfish/n01443537_1903.JPEG"
size = (448, 448)
query, ls_path_score = get_l1_score(root_img_path, query_path, size)

plot_results(query_path, ls_path_score, reverse = False)

"""#Image Retrieval using L2"""

def mean_square_difference(query, data):
  axis_batch_size = tuple(range(1, len(data.shape)))
  return np.mean((data-query)**2, axis = axis_batch_size)

a = [1, 2, 3]
b = [4, 5, 6]
a = np.array(a)
b = np.array(b)
print(mean_square_difference(a, b))

def get_l2_score(root_img_path, query_path, size):
  query = read_image_from_path(query_path, size)
  ls_path_score = []
  for folder in os.listdir(root_img_path):
    if folder in CLASS_NAME:
      path = root_img_path + folder
      images_np, images_path = folder_to_image(path, size)
      rates = mean_square_difference(query, images_np)
      ls_path_score.extend(list(zip(images_path, rates)))
  return query, ls_path_score

root_img_path = f"{ROOT}/train/"
query_path = f"{ROOT}/train/goldfish/n01443537_1903.JPEG"
size = (448, 448)
query, ls_path_score = get_l2_score(root_img_path, query_path, size)
plot_results(query_path, ls_path_score, reverse = False)

"""#Image Retrieval using Cosine Simliarity"""

def cosine_similarity(query, data):
  axis_batch_size = tuple(range(1, len(data.shape)))
  query_norm = np.sqrt(np.sum(query**2))
  data_norm = np.sqrt(np.sum(data**2, axis=axis_batch_size))
  return np.sum(data*query, axis=axis_batch_size)/(query_norm*data_norm +np.finfo(float).eps)

a = [1, 0, 1]
b = [1, 1, 0]
a = np.array(a)
b = np.array(b)
print(cosine_similarity(a, b))

def get_cosine_similarity_score(root_img_path, query_path, size):
  query = read_image_from_path(query_path, size)
  ls_path_score = []
  for folder in os.listdir(root_img_path):
    if folder in CLASS_NAME:
      path = root_img_path + folder
      images_np, images_path = folder_to_image(path, size)
      rates = cosine_similarity(query, images_np)
      ls_path_score.extend(list(zip(images_path, rates)))
  return query, ls_path_score

root_img_path = f"{ROOT}/train/"
query_path = f"{ROOT}/train/goldfish/n01443537_1903.JPEG"
size = (448, 448)
query, ls_path_score = get_cosine_similarity_score(root_img_path, query_path, size)
plot_results(query_path, ls_path_score, reverse = True)

"""#Image Retrieval using Correlation_Coefficient"""

def correlation_coefficient(query, data):
  axis_batch_size = tuple(range(1, len(data.shape)))
  query_mean = query - np.mean(query)
  data_mean = data - np.mean(data, axis=axis_batch_size, keepdims=True)
  query_norm = np.sqrt(np.sum(query_mean**2))
  data_norm = np.sqrt(np.sum(data_mean**2, axis=axis_batch_size))
  return np.sum(query_mean*data_mean, axis=axis_batch_size)/ (query_norm*data_norm +np.finfo(float).eps)

a = [2, 4]
b = [1, 2]
a = np.array(a)
b = np.array(b)
print(correlation_coefficient(a, b))

def get_correlation_coefficient_score(root_img_path, query_path, size):
  query = read_image_from_path(query_path, size)
  ls_path_score = []
  for folder in os.listdir(root_img_path):
    if folder in CLASS_NAME:
      path = root_img_path + folder
      images_np, images_path = folder_to_image(path, size)
      rates = correlation_coefficient(query, images_np)
      ls_path_score.extend(list(zip(images_path, rates)))
  return query, ls_path_score

root_img_path = f"{ROOT}/train/"
query_path = f"{ROOT}/train/goldfish/n01443537_1903.JPEG"
size = (448, 448)
query, ls_path_score = get_correlation_coefficient_score(root_img_path, query_path, size)
plot_results(query_path, ls_path_score, reverse = True)

"""#Image Retrieval using pretrained deep learning model

## L1 + CLIP
"""

!pip install -q chromadb
!pip install -q open-clip-torch

import os
import numpy as np
import matplotlib.pyplot as plt
from chromadb.utils.embedding_functions import OpenCLIPEmbeddingFunction

embedding_functions = OpenCLIPEmbeddingFunction()

def get_single_image_embedding(image):
  embedding = embedding_functions._encode_image(image=image)
  return np.array(embedding)

def get_l1_score_CLIP(root_img_path, query_path, size):
  query = read_image_from_path(query_path, size)
  query_embedding = get_single_image_embedding(query)
  ls_path_score = []
  for folder in os.listdir(root_img_path):
    if folder in CLASS_NAME:
      path = root_img_path + folder
      images_np, images_path = folder_to_image(path, size)
      embedding_list = []
      for idx_img in range(images_np.shape[0]):
        embedding = get_single_image_embedding(images_np[idx_img].astype(np.uint8))
        embedding_list.append(embedding)
      rates = absolute_difference(query_embedding, np.stack(embedding_list))
      ls_path_score.extend(list(zip(images_path, rates)))
  return query, ls_path_score

root_img_path = f"{ROOT}/train/"
query_path = f"{ROOT}/train/goldfish/n01443537_1903.JPEG"
size = (448, 448)
query, ls_path_score = get_l1_score_CLIP(root_img_path, query_path, size)
plot_results(query_path, ls_path_score, reverse = False)

"""## L2 + CLIP"""

def get_l2_score_CLIP(root_img_path, query_path, size):
  query = read_image_from_path(query_path, size)
  query_embedding = get_single_image_embedding(query)
  ls_path_score = []
  for folder in os.listdir(root_img_path):
    if folder in CLASS_NAME:
      if folder in CLASS_NAME:
        path = root_img_path + folder
        images_np, images_path = folder_to_image(path, size)
        embedding_list = []
        for idx_img in range(images_np.shape[0]):
          embedding = get_single_image_embedding(images_np[idx_img].astype(np.uint8))
          embedding_list.append(embedding)
        rates = mean_square_difference(query_embedding, np.stack(embedding_list))
        ls_path_score.extend(list(zip(images_path, rates)))
  return query, ls_path_score

root_img_path = f"{ROOT}/train/"
query_path = f"{ROOT}/train/goldfish/n01443537_1903.JPEG"
size = (448, 448)
query, ls_path_score = get_l2_score_CLIP(root_img_path, query_path, size)
plot_results(query_path, ls_path_score, reverse = False)

"""#Image Retrievel using Correlation Coefficient"""

def get_correlation_coefficient_score_CLIP(root_img_path, query_path, size):
  query = read_image_from_path(query_path, size)
  query_embedding = get_single_image_embedding(query)
  embedding_list = []
  for folder in os.listdir(root_img_path):
    if folder in CLASS_NAME:
      path = root_img_path + folder
      images_np, images_path = folder_to_image(path, size)
      for idx_img in range(images_np.shape[0]):
        embedding = get_single_image_embedding(images_np[idx_img].astype(np.uint8))
        embedding_list.append(embedding)
      rates = correlation_coefficient(query_embedding, np.stack(embedding_list))
      ls_path_score.extend(list(zip(images_path, rates)))
  return query, ls_path_score

root_img_path = f"{ROOT}/train/"
query_path = f"{ROOT}/train/goldfish/n01443537_1903.JPEG"
size = (448, 448)
query, ls_path_score = get_correlation_coefficient_score_CLIP(root_img_path, query_path, size)
plot_results(query_path, ls_path_score, reverse = True)

"""##Images Retrieval using Cosine Similarity"""

def get_cosine_similarity_score_CLIP(root_img_path, query_path, size):
  query = read_image_from_path(query_path, size)
  query_embedding = get_single_image_embedding(query)
  ls_path_score = []
  for folder in os.listdir(root_img_path):
    if folder in CLASS_NAME:
      path = root_img_path + folder
      images_np, images_path = folder_to_image(path, size)
      embedding_list = []
      for idx_img in range(images_np.shape[0]):
        embedding = get_single_image_embedding(images_np[idx_img].astype(np.uint8))
        embedding_list.append(embedding)
      rates = cosine_similarity(query_embedding, np.stack(embedding_list))
      ls_path_score.extend(list(zip(images_path, rates)))
  return query, ls_path_score

root_img_path = f'{ROOT}/train/'
query_path = f'{ROOT}/train/goldfish/n01443537_1903.JPEG'
size = (448, 448)
query, ls_path_score = get_cosine_similarity_score_CLIP(root_img_path, query_path, size)
plot_results(query_path, ls_path_score, reverse = True)

"""#Optimize Model"""

def get_files_path(path):
  files_path = []
  for label in CLASS_NAME:
    label_path = path + '/' + label
    filenames = os.listdir(label_path)
    for filename in filenames:
      files_path.append(label_path + '/' + filename)
  return files_path

data_path = f'{ROOT}/train/'
files_path = get_files_path(path = data_path)

"""##L2 Collection"""

from PIL import Image
from tqdm import tqdm

def add_embedding(collection, files_path):
    ids = []
    embeddings = []
    for id_filepath, filepath in tqdm(enumerate(files_path)):
        ids.append(f'id_{id_filepath}')
        with Image.open(filepath) as image:
            # Convert image to RGB if it's not already
            if image.mode != 'RGB':
                image = image.convert('RGB')
            embedding = get_single_image_embedding(image=image)
        embeddings.append(embedding)

    collection.add(
        embeddings=embeddings,
        ids=ids
    )

embedding_function = OpenCLIPEmbeddingFunction()

def get_single_image_embedding(image):
    embedding = embedding_function._encode_image(image=np.array(image))
    return embedding

img = Image.open('data/train/African_crocodile/n01697457_260.JPEG')
get_single_image_embedding(image=img)

!pip install chromadb
import chromadb

!pip install tqdm
from tqdm import tqdm

!pip install chromadb tqdm Pillow

import chromadb
from tqdm import tqdm
from PIL import Image
import numpy as np

# Create a Chroma Client
chroma_client = chromadb.Client()
# Create a collection
l2_collection = chroma_client.get_or_create_collection(name="l2_collection",
                                                           metadata={HNSW_SPACE: "l2"})
add_embedding(collection=l2_collection, files_path=files_path)

def search(imagine_path, collection, n_results):
  query_image = Image.open(imagine_path)
  query_embedding = get_single_image_embedding(query_image)
  results = collection.query(
      query_embeddings = [query_embedding],
      n_results = n_results
      )
  return results

test_path = f'{ROOT}/test/'
test_files_path = get_files_path(path = test_path)
test_path = test_files_path[1]
l2_collection = search(imagine_path = test_path, collection = l2_collection, n_results = 5)
plot_results(test_path, files_path = files_path, results = l2_collection)